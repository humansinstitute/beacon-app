From 8d88084b634e154aaa4ae858d7c746facaf90898 Mon Sep 17 00:00:00 2001
From: HumansInstitute <petewinn@gmail.com>
Date: Tue, 10 Jun 2025 09:47:09 +0800
Subject: [PATCH 3/3] investigate whatsapp client not running

---
 .../gateways/whatsapp.gateway.worker.js       | 113 ++++++++++--------
 tests/gateway.routes.spec.js                  |  53 +++++++-
 2 files changed, 113 insertions(+), 53 deletions(-)

diff --git a/app/workers/gateways/whatsapp.gateway.worker.js b/app/workers/gateways/whatsapp.gateway.worker.js
index 41863b6..02ce1b4 100644
--- a/app/workers/gateways/whatsapp.gateway.worker.js
+++ b/app/workers/gateways/whatsapp.gateway.worker.js
@@ -7,11 +7,6 @@
  * - Logs interactions and tracks budget usage in MongoDB.
  */
 
-// Library for interacting with WhatsApp Web and managing sessions.
-import pkg from "whatsapp-web.js";
-const { Client, LocalAuth } = pkg;
-// Displays QR code in the terminal for user authentication.
-import qrcode from "qrcode-terminal";
 import axios from "axios";
 import { v4 as uuidv4 } from "uuid";
 
@@ -19,6 +14,63 @@ import { v4 as uuidv4 } from "uuid";
 import dotenv from "dotenv";
 dotenv.config();
 
+import pkg from "whatsapp-web.js";
+const { Client, LocalAuth } = pkg;
+import qrcode from "qrcode-terminal";
+
+let client = null;
+const isTest = process.env.NODE_ENV === "test";
+
+if (!isTest) {
+  // Initialize WhatsApp client with LocalAuth persistence.
+  client = new Client({
+    authStrategy: new LocalAuth(),
+    puppeteer: {
+      args: ["--no-sandbox", "--disable-setuid-sandbox"],
+    },
+  });
+
+  // Display QR code in terminal when WhatsApp Web requests authentication.
+  client.on("qr", (qr) => {
+    qrcode.generate(qr, { small: true });
+  });
+
+  // Once the client is ready, log confirmation and check current budget.
+  client.once("ready", () => {
+    console.log("Client is ready!");
+    // checkAndLogBudget();
+  });
+
+  // Handle authentication failures by logging the error.
+  client.on("auth_failure", (msg) => {
+    console.error("Authentication failure:", msg);
+  });
+
+  /**
+   * Listener for incoming WhatsApp messages.
+   * - Ignores messages sent by this client.
+   * - Checks budget and processes messages if sufficient funds remain.
+   */
+  client.on("message_create", async (message) => {
+    // Ignore messages sent by the bot itself.
+    if (message.fromMe) {
+      console.log("Ignoring message from self:", message.body);
+      return;
+    }
+
+    console.log("Received message:", message.body);
+    // Call the new function to process and queue the message
+    await transformAndQueueMessage(message);
+  });
+} else {
+  // In test mode, mock the client
+  client = {
+    sendMessage: async () => ({ id: { _serialized: "test-message-id" } }),
+    on: () => {},
+    once: () => {},
+  };
+}
+
 // Define the function to transform and queue the message
 export const transformAndQueueMessage = async (message) => {
   try {
@@ -75,59 +127,16 @@ export const transformAndQueueMessage = async (message) => {
  * @returns {Promise<{ success: boolean, messageID: string }>}
  */
 export async function sendMessage(chatID, content, options = {}) {
-  if (process.env.NODE_ENV === "test") {
-    return { success: true, messageID: "test-message-id" };
-  }
   try {
     const message = await client.sendMessage(chatID, content, options);
     const messageID = message.id._serialized;
     return { success: true, messageID };
   } catch (error) {
     console.error("Error sending WhatsApp message:", error);
+    if (isTest) {
+      // In test mode, return a failure result instead of throwing
+      return { success: false, error: error.message };
+    }
     throw error;
   }
 }
-
-// Initialize WhatsApp client with LocalAuth persistence.
-// Puppeteer args ensure compatibility in sandboxed environments.
-const client = new Client({
-  authStrategy: new LocalAuth(),
-  puppeteer: {
-    args: ["--no-sandbox", "--disable-setuid-sandbox"],
-  },
-});
-
-// Display QR code in terminal when WhatsApp Web requests authentication.
-client.on("qr", (qr) => {
-  qrcode.generate(qr, { small: true });
-});
-
-// Once the client is ready, log confirmation and check current budget.
-client.once("ready", () => {
-  console.log("Client is ready!");
-  // checkAndLogBudget();
-});
-
-// Handle authentication failures by logging the error.
-client.on("auth_failure", (msg) => {
-  console.error("Authentication failure:", msg);
-});
-
-/**
- * Listener for incoming WhatsApp messages.
- * - Ignores messages sent by this client.
- * - Checks budget and processes messages if sufficient funds remain.
- */
-client.on("message_create", async (message) => {
-  // Ignore messages sent by the bot itself.
-  if (message.fromMe) {
-    console.log("Ignoring message from self:", message.body);
-    return;
-  }
-
-  console.log("Received message:", message.body);
-  // console.log(message); // Keep this commented or remove if not needed for production
-
-  // Call the new function to process and queue the message
-  await transformAndQueueMessage(message);
-});
diff --git a/tests/gateway.routes.spec.js b/tests/gateway.routes.spec.js
index 552abc6..b941faa 100644
--- a/tests/gateway.routes.spec.js
+++ b/tests/gateway.routes.spec.js
@@ -2,7 +2,9 @@ import request from "supertest";
 import { app } from "../index.js";
 import mongoose from "mongoose";
 
-// Mock sendMessage to always throw (simulate error)
+import { BeaconMessage } from "../models/index.js";
+
+// Default: Mock sendMessage to always throw (simulate error)
 jest.mock("../app/workers/gateways/whatsapp.gateway.worker.js", () => ({
   sendMessage: jest.fn().mockRejectedValue(new Error("Simulated error")),
 }));
@@ -46,5 +48,54 @@ describe("Gateway Routes", () => {
       expect(res.status).toBe(500);
       expect(res.body).toHaveProperty("error");
     }, 10000); // Increase timeout to 10s
+
+    it("should respond with 200 and return messageID/timestamp on success", async () => {
+      // Patch the mock to resolve for this test only
+      const {
+        sendMessage,
+      } = require("../app/workers/gateways/whatsapp.gateway.worker.js");
+      sendMessage.mockResolvedValueOnce({
+        success: true,
+        messageID: "mock-msg-id",
+      });
+
+      // Insert a BeaconMessage to update
+      const beacon = await BeaconMessage.create({
+        message: {
+          content: "test",
+          role: "user",
+          messageID: "orig-msg-id",
+          replyTo: null,
+          ts: Math.floor(Date.now() / 1000),
+        },
+        origin: {
+          channel: "beacon.whatsapp",
+          gatewayUserID: "test-user",
+          gatewayMessageID: "orig-msg-id",
+          gatewayReplyTo: null,
+          gatewayNpub: "npub-test",
+          userNpub: "npub-user",
+        },
+      });
+
+      const payload = {
+        chatID: "61487097701@c.us",
+        content: "This is test data for beacon",
+        options: { quotedMessageId: "3EB08FC33CD181CBECDD87" },
+        beaconMessageID: beacon._id.toString(),
+      };
+
+      const res = await request(app).post("/api/gateway/wa").send(payload);
+      expect(res.status).toBe(200);
+      expect(res.body).toHaveProperty("messageID", "mock-msg-id");
+      expect(res.body).toHaveProperty("timestamp");
+
+      // Check that the BeaconMessage was updated
+      const updated = await BeaconMessage.findById(beacon._id);
+      expect(updated.response).toBeDefined();
+      expect(updated.response.messageID).toBe("mock-msg-id");
+      expect(updated.response.role).toBe("agent");
+      expect(updated.response.content).toBe(payload.content);
+    });
   });
 });
-- 
2.39.3 (Apple Git-146)

